//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Account_Services.AccountSvcReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transaction", Namespace="http://schemas.datacontract.org/2004/07/AccountLib")]
    [System.SerializableAttribute()]
    public partial class Transaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Account_Services.AccountSvcReference.TransactionType TransTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Account_Services.AccountSvcReference.TransactionType TransType {
            get {
                return this.TransTypeField;
            }
            set {
                if ((this.TransTypeField.Equals(value) != true)) {
                    this.TransTypeField = value;
                    this.RaisePropertyChanged("TransType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionType", Namespace="http://schemas.datacontract.org/2004/07/AccountLib")]
    public enum TransactionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WITHDRAW = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DEPOSIT = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountSvcReference.IServiceAccount")]
    public interface IServiceAccount {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAccount/AddTransaction", ReplyAction="http://tempuri.org/IServiceAccount/AddTransactionResponse")]
        bool AddTransaction(string accountName, Account_Services.AccountSvcReference.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAccount/CreateAccount", ReplyAction="http://tempuri.org/IServiceAccount/CreateAccountResponse")]
        bool CreateAccount(string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAccount/GetBalance", ReplyAction="http://tempuri.org/IServiceAccount/GetBalanceResponse")]
        double GetBalance(string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAccount/GetTransactions", ReplyAction="http://tempuri.org/IServiceAccount/GetTransactionsResponse")]
        Account_Services.AccountSvcReference.Transaction[] GetTransactions(string accountName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAccountChannel : Account_Services.AccountSvcReference.IServiceAccount, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAccountClient : System.ServiceModel.ClientBase<Account_Services.AccountSvcReference.IServiceAccount>, Account_Services.AccountSvcReference.IServiceAccount {
        
        public ServiceAccountClient() {
        }
        
        public ServiceAccountClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceAccountClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAccountClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAccountClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddTransaction(string accountName, Account_Services.AccountSvcReference.Transaction transaction) {
            return base.Channel.AddTransaction(accountName, transaction);
        }
        
        public bool CreateAccount(string accountName) {
            return base.Channel.CreateAccount(accountName);
        }
        
        public double GetBalance(string accountName) {
            return base.Channel.GetBalance(accountName);
        }
        
        public Account_Services.AccountSvcReference.Transaction[] GetTransactions(string accountName) {
            return base.Channel.GetTransactions(accountName);
        }
    }
}
